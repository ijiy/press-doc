import{_ as a,c as l,a0 as i,o as t}from"./chunks/framework.Bakaa70P.js";const p=JSON.parse('{"title":"相关术语","description":"","frontmatter":{},"headers":[],"relativePath":"convention/term.md","filePath":"convention/term.md","lastUpdated":1715407916000}'),o={name:"convention/term.md"};function r(n,e,d,s,c,h){return t(),l("div",null,e[0]||(e[0]=[i('<h1 id="相关术语" tabindex="-1">相关术语 <a class="header-anchor" href="#相关术语" aria-label="Permalink to &quot;相关术语&quot;">​</a></h1><h2 id="rfc" tabindex="-1">RFC <a class="header-anchor" href="#rfc" aria-label="Permalink to &quot;RFC&quot;">​</a></h2><ul><li><p>Request For Documents, RFC’s</p></li><li><p>官方维护的最权威的文档</p></li></ul><h2 id="sfc" tabindex="-1">SFC <a class="header-anchor" href="#sfc" aria-label="Permalink to &quot;SFC&quot;">​</a></h2><ul><li>Single File Components, 单页面组件</li></ul><h2 id="mvvm" tabindex="-1">MVVM <a class="header-anchor" href="#mvvm" aria-label="Permalink to &quot;MVVM&quot;">​</a></h2><ul><li><p>Model-View-ViewModel</p><ul><li>模型 (Model, js data)</li><li>视图 (View, html + css)</li><li>模型和视图的双向映射 (viewModel)</li></ul></li><li><p>viewModel 的原理在于 Object.defineProperty, 初始化时将数据的原型上设置 <code>set</code>和<code>get</code>, 其之间互相赋值来达到双向绑定</p></li></ul><h2 id="微前端" tabindex="-1">微前端 <a class="header-anchor" href="#微前端" aria-label="Permalink to &quot;微前端&quot;">​</a></h2><ul><li><p>通过独立发布功能的方式来共同构建现代化web应用</p></li><li><p>每个微应用之间状态隔离, 具备独立开发, 独立运行的能力</p></li><li><p>前后端可独立开发, 部署完成后主框架自动完成同步更新</p></li></ul><h2 id="saas" tabindex="-1">SaaS <a class="header-anchor" href="#saas" aria-label="Permalink to &quot;SaaS&quot;">​</a></h2><ul><li>Software-as-a-Service, 软件即服务, 较多的是云产品服务</li></ul><h2 id="a11y" tabindex="-1">A11y <a class="header-anchor" href="#a11y" aria-label="Permalink to &quot;A11y&quot;">​</a></h2><ul><li>无障碍辅助功能 <ul><li>如添加<code>label</code>, <code>alt</code></li></ul></li></ul>',13)]))}const m=a(o,[["render",r]]);export{p as __pageData,m as default};
