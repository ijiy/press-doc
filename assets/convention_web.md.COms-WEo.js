import{_ as l,c as a,o as s,a1 as e}from"./chunks/framework.B3EJgH_4.js";const m=JSON.parse('{"title":"规范 【web】","description":"","frontmatter":{},"headers":[],"relativePath":"convention/web.md","filePath":"convention/web.md","lastUpdated":1715407916000}'),i={name:"convention/web.md"},n=e(`<h1 id="规范-【web】" tabindex="-1">规范 【web】 <a class="header-anchor" href="#规范-【web】" aria-label="Permalink to &quot;规范 【web】&quot;">​</a></h1><h2 id="css" tabindex="-1">css <a class="header-anchor" href="#css" aria-label="Permalink to &quot;css&quot;">​</a></h2><ul><li><p>选择器不要直接取标签名</p><ul><li>如 div, .app div</li></ul></li><li><p>用有意义的类名替代后代选择器</p><ul><li>.animal-cat, 替代 .animal &gt; .cat</li></ul></li><li><p>多层关系的后代选择器不利于维护</p><ul><li>.a &gt; .b &gt; .c, 当 .a 或 .b 改变, .c 就作废了</li></ul></li><li><p>不要用 id 来写样式</p></li><li><p>id 本身也会作为全局变量</p></li><li><p>&quot;z-index&quot; 值应该刚好, 不要随意, 如 9999</p></li><li><p>避免使用 &quot;important&quot;</p></li><li><p>尽量少用子代选择器, 避免直接用标签选择器, 不要用ID选择器</p></li></ul><h2 id="html" tabindex="-1">html <a class="header-anchor" href="#html" aria-label="Permalink to &quot;html&quot;">​</a></h2><ul><li><p>采用语义化标签, 不要通篇 div</p></li><li><p>合理排版, 合理嵌套, 规范DOM树, 不要依赖定位</p></li><li><p>分离结构, 样式, 脚本</p></li><li><p>避免在标签中定义 style</p></li></ul><h2 id="js" tabindex="-1">js <a class="header-anchor" href="#js" aria-label="Permalink to &quot;js&quot;">​</a></h2><ul><li>条件 \\ 循环语句 保留大括号</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>不要用&quot;三元运算符&quot;关联 多语句 \\ 逻辑语句 \\ 对象 \\ 函数</li></ul><h2 id="空格" tabindex="-1">空格 <a class="header-anchor" href="#空格" aria-label="Permalink to &quot;空格&quot;">​</a></h2><ul><li><p>选择器, 函数名, 关键字, 逗号 \\ 括号 \\ 冒号(非伪类和伪元素) 后面有空格</p></li><li><p>运算符 左右有空格</p><ul><li>.txt {}</li><li>color: rgba(0, 0, 0, .5);</li><li>a += 1 / 1;</li><li>const fn = () =&gt; {}</li><li>if (a === b) {}</li></ul></li></ul><h2 id="分号" tabindex="-1">分号 <a class="header-anchor" href="#分号" aria-label="Permalink to &quot;分号&quot;">​</a></h2><ul><li><p>非函数结束语句后</p></li><li><p>样式最后一个属性值也要有分号</p></li></ul><h2 id="换行" tabindex="-1">换行 <a class="header-anchor" href="#换行" aria-label="Permalink to &quot;换行&quot;">​</a></h2><ul><li><p>声明变量 \\ 语句 (&quot;;&quot;) \\ 函数之间</p></li><li><p>以大括号结束的语句 \\ 函数之间 以及与其它语句之间</p></li><li><p>标签 \\ 样式 \\ 脚本 \\ 不同模块之间</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">switch</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F92672;">    case</span><span style="color:#E6DB74;"> &#39;&#39;</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        break</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">    default</span><span style="color:#F8F8F2;">: </span><span style="color:#E6DB74;">&#39;&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>标签多属性</li></ul><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">video</span></span>
<span class="line"><span style="color:#A6E22E;">	src</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;&quot;</span></span>
<span class="line"><span style="color:#A6E22E;">	controls</span></span>
<span class="line"><span style="color:#F8F8F2;">&gt;&lt;/</span><span style="color:#F92672;">video</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="性能" tabindex="-1">性能 <a class="header-anchor" href="#性能" aria-label="Permalink to &quot;性能&quot;">​</a></h2><ul><li><p>不要在数据驱动的项目中, 直接操作DOM的, 和引入DOM操作的库 (jQ, zepto)</p></li><li><p>不要在一个页面做两个同时依赖链接参数的分页</p></li><li><p>promise都要有catch, 并有info或message内容</p></li><li><p>每个项目都有一个规范的唯一的中文命名, 正常依照需求项目名</p></li><li><p>避免在标签中定义样式 (<code>style</code>)</p></li></ul><h2 id="vue" tabindex="-1">vue <a class="header-anchor" href="#vue" aria-label="Permalink to &quot;vue&quot;">​</a></h2><ul><li><p>组件</p><ul><li>命名: 应该倾向于完整单词而不是缩写; 始终是多个单词的; 始终是单词大写开头</li><li>基础组件名称: 以一个特定的前缀开头, 比如 [Base, App, V], <code>BaseIcon.vue</code></li><li>只应该拥有单个活跃实例的组件应该以 <code>The</code> 前缀命名, 以示其唯一性, <code>TheSidebar.vue</code></li><li>每个组件单独分成文件</li><li>以高阶的 (通常是一般化描述的) 单词开头, 以描述性的修饰词结尾, <code>SearchButtonClear.vue</code></li></ul></li><li><p>不要把 v-if 和 v-for 同时用在同一个元素上</p></li><li><p>props</p><ul><li>以小驼峰命名</li><li>定义应尽量详细, 包括类型限制</li></ul></li></ul><h2 id="w3c" tabindex="-1">w3c <a class="header-anchor" href="#w3c" aria-label="Permalink to &quot;w3c&quot;">​</a></h2><ul><li><p>文档声明; 语言编码; 标签和属性要小写; 标签属性值要有引号;</p></li><li><p>特殊符号用编码表示 (&lt;, &lt; &gt;, &gt;&amp;, &amp;)</p></li><li><p>属性必须有值, 或重复本身</p></li><li><p>抛弃 font 标签</p></li><li><p>合理嵌套</p></li><li><p>用label描述input, 并有对应的for与id</p></li><li><p>定义好图片尺寸, 避免加载闪烁</p></li><li><p>使用小写文件名</p></li></ul><h2 id="好看点" tabindex="-1">好看点 <a class="header-anchor" href="#好看点" aria-label="Permalink to &quot;好看点&quot;">​</a></h2><ul><li><p><code>0px</code>等, 直接用<code>0</code></p><ul><li><code>width: 0;</code></li></ul></li><li><p>用制表符, 或两个空格缩进</p></li><li><p>不要 制表符 \\ 两个空格 混用</p></li><li><p>css 统一用单引号或双引号; js 优先用单引号; html 属性值用双引号</p></li><li><p>不要 单 \\ 双引号 混用</p></li><li><p>要有结构层次和对齐, 保持行块该有的层次感</p></li></ul><h2 id="编程范式" tabindex="-1">编程范式 <a class="header-anchor" href="#编程范式" aria-label="Permalink to &quot;编程范式&quot;">​</a></h2><ul><li><p>面向对象 (OOP + Class + IoC)</p></li><li><p>函数式 (FP + Function + Hooks)</p></li><li><p>两者不要混合使用, 推荐函数式编程</p></li></ul>`,28),p=[n];function o(t,r,c,u,d,h){return s(),a("div",null,p)}const F=l(i,[["render",o]]);export{m as __pageData,F as default};
