import{_ as s,c as a,o as n,a1 as e}from"./chunks/framework.B3EJgH_4.js";const y=JSON.parse('{"title":"husky 【Git hooks】","description":"","frontmatter":{},"headers":[],"relativePath":"git/husky.md","filePath":"git/husky.md","lastUpdated":1715407916000}'),l={name:"git/husky.md"},o=e('<h1 id="husky-【git-hooks】" tabindex="-1">husky 【Git hooks】 <a class="header-anchor" href="#husky-【git-hooks】" aria-label="Permalink to &quot;husky 【Git hooks】&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">pnpm</span><span style="color:#E6DB74;"> add</span><span style="color:#E6DB74;"> husky</span><span style="color:#E6DB74;"> lint-staged</span><span style="color:#AE81FF;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;"># 会在`package.json`生成 `scripts` -&gt; `&quot;prepare&quot;: &quot;husky&quot;` (项目初始化会生成`.husky` -&gt; `_`配置文件)</span></span>\n<span class="line"><span style="color:#88846F;"># 会在根目录下创建`.husky`, 其目录下包括 `_`配置文件 (会被git忽略), `pre-commit` (git hooks执行的命令)</span></span>\n<span class="line"><span style="color:#A6E22E;">npx</span><span style="color:#E6DB74;"> husky</span><span style="color:#E6DB74;"> init</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>package.json <ul><li>提交的文件不在<code>lint-staged</code>所包含的目录, 将跳过hooks</li></ul></li></ul><div class="language-json line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">{</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">	&quot;lint-staged&quot;</span><span style="color:#F8F8F2;">: {</span></span>\n<span class="line"><span style="color:#66D9EF;font-style:italic;">		&quot;src/**/*.{ts,vue}&quot;</span><span style="color:#F8F8F2;">: </span><span style="color:#CFCFC2;">&quot;pnpm lint&quot;</span></span>\n<span class="line"><span style="color:#F8F8F2;">	}</span></span>\n<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><ul><li>然后通过命令或SourceTree等工具提交, 就可以在提交前执行<code>lint-staged</code>所包含的命令</li></ul>',8),t=[o];function p(i,r,c,u,d,h){return n(),a("div",null,t)}const m=s(l,[["render",p]]);export{y as __pageData,m as default};
