import{_ as a,c as n,a0 as e,o as l}from"./chunks/framework.Bakaa70P.js";const d=JSON.parse('{"title":"inquirer 【在 js 中实现 shell confirm】","description":"","frontmatter":{},"headers":[],"relativePath":"node/plugin/inquirer.md","filePath":"node/plugin/inquirer.md","lastUpdated":1715407916000}'),o={name:"node/plugin/inquirer.md"};function p(r,s,t,i,c,F){return l(),n("div",null,s[0]||(s[0]=[e(`<h1 id="inquirer-【在-js-中实现-shell-confirm】" tabindex="-1"><a href="https://github.com/SBoudrias/Inquirer.js" target="_blank" rel="noreferrer">inquirer 【在 js 中实现 shell confirm】</a> <a class="header-anchor" href="#inquirer-【在-js-中实现-shell-confirm】" aria-label="Permalink to &quot;[inquirer 【在 js 中实现 shell confirm】](https://github.com/SBoudrias/Inquirer.js)&quot;">​</a></h1><h2 id="安装" tabindex="-1">安装 <a class="header-anchor" href="#安装" aria-label="Permalink to &quot;安装&quot;">​</a></h2><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#A6E22E;">npm</span><span style="color:#E6DB74;"> i</span><span style="color:#E6DB74;"> inquirer</span><span style="color:#AE81FF;"> -D</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">process.stdin.</span><span style="color:#A6E22E;">on</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;data&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#A6E22E;">	require</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;inquirer&#39;</span><span style="color:#F8F8F2;">).</span><span style="color:#A6E22E;">prompt</span><span style="color:#F8F8F2;">([{</span></span>
<span class="line"><span style="color:#F8F8F2;">		type: </span><span style="color:#E6DB74;">&#39;confirm&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">		name: </span><span style="color:#E6DB74;">&#39;build all&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">		message: </span><span style="color:#E6DB74;">&#39;Do you pack all projects?&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">		default: </span><span style="color:#AE81FF;">true</span></span>
<span class="line"><span style="color:#F8F8F2;">	}]).</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> ).</span><span style="color:#A6E22E;">catch</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(err));</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div>`,5)]))}const y=a(o,[["render",p]]);export{d as __pageData,y as default};
