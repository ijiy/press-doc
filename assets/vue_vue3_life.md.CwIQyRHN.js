import{_ as s,c as n,o as a,a1 as e}from"./chunks/framework.B3EJgH_4.js";const m=JSON.parse('{"title":"vue3 【生命周期钩子】","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue3/life.md","filePath":"vue/vue3/life.md","lastUpdated":1716256931000}'),l={name:"vue/vue3/life.md"},p=e(`<h1 id="vue3-【生命周期钩子】" tabindex="-1">vue3 【生命周期钩子】 <a class="header-anchor" href="#vue3-【生命周期钩子】" aria-label="Permalink to &quot;vue3 【生命周期钩子】&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><ul><li>这里只推荐项目中常用的钩子 <ul><li>谨慎, 或禁用 <code>onUpdated</code></li><li>没什么用 (同时在服务器端渲染期间不会被调用) <ul><li><code>onBeforeMount</code>, <code>onBeforeUnmount</code>, <code>onBeforeUpdate</code></li></ul></li><li>没什么用 (调试) <ul><li><code>onErrorCaptured</code>, <code>onRenderTracked</code>, <code>onRenderTriggered</code></li></ul></li><li>不用 <code>beforeCreate</code><ul><li><code>setup</code>的顶层作用域, 相当于<code>beforeCreate</code></li></ul></li><li>不用 <code>onServerPrefetch</code>, 只作用于服务器端</li></ul></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#88846F;">	// 组件挂载完成后执行</span></span>
<span class="line"><span style="color:#F8F8F2;">	onMounted,</span></span>
<span class="line"><span style="color:#88846F;">	// 组件实例被卸载之后调用</span></span>
<span class="line"><span style="color:#F8F8F2;">	onUnmounted,</span></span>
<span class="line"><span style="color:#88846F;">	// &lt;KeepAlive&gt;缓存的组件变为\`活跃\`状态时触发 (服务器端渲染期间不会被调用)</span></span>
<span class="line"><span style="color:#F8F8F2;">	onActivated,</span></span>
<span class="line"><span style="color:#88846F;">	// &lt;KeepAlive&gt;缓存的组件变为\`不活跃\`状态时触发 (服务器端渲染期间不会被调用)</span></span>
<span class="line"><span style="color:#F8F8F2;">	onDeactivated,</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">from</span><span style="color:#E6DB74;"> &#39;vue&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">onMounted</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#88846F;">	// 实例 canvas</span></span>
<span class="line"><span style="color:#88846F;">	// uniapp的组件在其中\`createCanvasContext\` (不用上下文做第二个参数) (页面应该在\`onReady\`中)</span></span>
<span class="line"><span style="color:#88846F;">	// 获取 echarts 容器</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div>`,4),o=[p];function c(r,t,i,d,u,b){return a(),n("div",null,o)}const _=s(l,[["render",c]]);export{m as __pageData,_ as default};
