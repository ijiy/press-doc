import{_ as s,c as a,o as l,a1 as n}from"./chunks/framework.B3EJgH_4.js";const b=JSON.parse('{"title":"vue3 【响应式对象】","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue3/reactivity.md","filePath":"vue/vue3/reactivity.md","lastUpdated":1725956646000}'),e={name:"vue/vue3/reactivity.md"},o=n(`<h1 id="vue3-【响应式对象】" tabindex="-1">vue3 【响应式对象】 <a class="header-anchor" href="#vue3-【响应式对象】" aria-label="Permalink to &quot;vue3 【响应式对象】&quot;">​</a></h1><h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><ul><li>应用场景 <ul><li>数据的动态渲染</li><li>作为侦听和属性计算的参与成员</li></ul></li></ul><h2 id="声明响应式状态" tabindex="-1">声明响应式状态 <a class="header-anchor" href="#声明响应式状态" aria-label="Permalink to &quot;声明响应式状态&quot;">​</a></h2><blockquote><p>基于<code>Proxy</code>实现</p></blockquote><ul><li><p><code>reactive(接受值)</code></p><ul><li>接受值, 是一个对象</li><li><code>Proxy</code>只响应对象顶层属性, 若属性值为对象, 则会通过<code>reactive</code>递归转化, 实现深层响应性</li><li>应用场景 <ul><li>如处理<code>form</code>, 其中<code>formItem</code>会在后续操作中, 动态改变 <ul><li><code>const formData = reactive({dataList: []});</code></li><li><code>formData.dataList = res.data</code><ul><li>res.data: <code>[{type: &#39;input&#39;, value: &#39;&#39;}, {type: &#39;area&#39;, value: &#39;&#39;}]</code></li></ul></li><li><code>formData.dataList.push({type: &#39;select&#39;, value: &#39;&#39;})</code><ul><li>浅层作用形式, 无法通过<code>push</code>等实现响应式堆入, 需要重新给顶层对象<code>dataList</code>赋值, 但这样一方面会造成较大面积的回流, 另一方面重定义了深层次对象的响应性</li></ul></li></ul></li><li><code>el-form</code>的<code>:rules</code>, 如果其中一个<code>message</code>是响应式的, 那么必须使用<code>reactive</code>包裹<code>rules</code>对象 (非响应式的, 应该使用普通对象)</li><li>使用<code>toRaw</code>, 返回原始值, 以结束对象响应性的传递 (对<code>ref</code>, <code>shallowRef</code>无效) <ul><li><code>emits(&#39;change&#39;, toRaw(xxx))</code></li></ul></li><li>使用<code>markRaw</code>, 返回浅层响应式对象, 以优化性能, 接收值只能是一个对象 <ul><li>当<code>reactive</code>的成员<code>xxx</code>成为另一个<code>reactive</code>的成员<code>yyy</code>的属性值: <code>yyy: markRaw(xxx)</code> (或 另一个<code>reactive</code> 替换成浅层响应式对象)</li></ul></li></ul></li></ul></li><li><p><code>ref(接受值)</code></p><ul><li><code>Proxy</code>只接受对象作为入参, <code>ref</code>通过内部值<code>{value: 接受值}</code>作为<code>Proxy</code>的入参 <ul><li>接受值是对象, 将通过<code>reactive</code>转化接受值 <ul><li>即<code>Proxy</code>的入参为<code>{value: reactive(接受值)}</code><ul><li>相当于<code>Proxy({value: Proxy(接受值)})</code></li></ul></li></ul></li></ul></li><li>内部值的读写要通过<code>.value</code>去实现 (在模板中可以直接读写)</li><li>应用场景 <ul><li>如单独声明<code>tree</code>的<code>dataList</code>, 其中<code>treeItem</code>会在后续操作中, 动态改变; <code>activeId</code>单独使用浅层作用形式声明 <ul><li><code>const dataList = ref([])</code></li><li><code>const activeId = shallowRef(&#39;&#39;)</code></li></ul></li><li>在不考虑性能的情况下, <code>ref</code>可以处理任何场景的响应式对象声明, 且不用考虑数据层次的变化. 但这并不推荐, 应该在分析需求时, 确认采用哪种方式声明响应式对象</li><li>结合ES6的开发风格 (如尾随逗号) 和个人风格, 会使用<code>reactive</code>代替<code>ref</code>, 这样<code>ref</code>就无用武之地了 <ul><li>习惯上的预留风格, 可以这样写 <code>const deepData = reactive({ dataList: [], })</code> (字面量换行)</li><li>如又有一个深度操作的对象<code>demoObj</code>, 可以这样写 <code>const deepData = reactive({ dataList: [], demoObj: {} })</code> (避免混入浅层操作的对象)</li></ul></li></ul></li></ul></li></ul><h2 id="浅层作用形式" tabindex="-1">浅层作用形式 <a class="header-anchor" href="#浅层作用形式" aria-label="Permalink to &quot;浅层作用形式&quot;">​</a></h2><blockquote><p>可以避免大型数据的响应性开销, 来优化性能</p><p>在选项式中默认深层次响应式</p></blockquote><ul><li><p><code>shallowReactive</code></p><ul><li><code>reactive</code>的浅层作用形式</li><li>只保留对象顶层次访问的响应性</li><li>应用场景 <ul><li>如渲染一张表格, 真正需要响应的是<code>dataList</code>, 而不是<code>dataItem</code><ul><li><code>const tableData = shallowReactive({dataList: []});</code></li><li><code>tableData.dataList = res.data</code> (res.data: <code>[{id: &#39;1&#39;, name: &#39;a&#39;}, {id: &#39;2&#39;, name: &#39;b&#39;}]</code>)</li></ul></li><li>将复杂数据扁平化处理, 如<code>reactive({a: {x: 1}, b: {y: 2}})</code>, 可以改成 <ul><li><code>shallowReactive({x: 1})</code></li><li><code>shallowReactive({y: 2})</code></li></ul></li></ul></li></ul></li><li><p><code>shallowRef(接受值)</code></p><ul><li><code>ref</code>的浅层作用形式, 其内部值会原样存储和暴露, 且不会被深层递归地转为响应式 <ul><li>接受值是对象, 不会被<code>reactive</code>转化 <ul><li>即<code>Proxy</code>的入参为<code>{value: 接受值}</code></li><li><code>ref(shallowRef(接受值))</code>和<code>shallowRef(接受值)</code>返回的内部值一样</li></ul></li><li>接受值非对象, 返回的内部值和<code>ref</code>一样</li></ul></li><li>应用场景 <ul><li><code>provide</code>提供的响应式数据会被<code>ref</code>包裹 <ul><li>若响应式数据的声明方式为<code>ref</code>, <code>inject</code>的结果就会变成嵌套一个<code>ref</code><ul><li>而<code>shallowRef</code>可以规避这个问题</li></ul></li></ul></li></ul></li></ul></li></ul><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> dataSRt </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> shallowReactive</span><span style="color:#F8F8F2;">({</span></span>
<span class="line"><span style="color:#F8F8F2;">	list: [],</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> cList </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">dataSRt.list];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 首次赋值不需要, 如果是二维分页, 只要清空当前分页的数据</span></span>
<span class="line"><span style="color:#F8F8F2;">dataSRt.list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 赋予请求的列表数据</span></span>
<span class="line"><span style="color:#F8F8F2;">cList </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">dataSRt.list </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> cList;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="usetemplateref" tabindex="-1">useTemplateRef <a class="header-anchor" href="#usetemplateref" aria-label="Permalink to &quot;useTemplateRef&quot;">​</a></h2><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">	&lt;</span><span style="color:#F92672;">TapCaptcha</span></span>
<span class="line"><span style="color:#A6E22E;">		ref</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;ref_tap_captcha&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">	/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">script</span><span style="color:#A6E22E;"> setup</span><span style="color:#A6E22E;"> lang</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;ts&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">	const</span><span style="color:#F8F8F2;"> TapCaptcha </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> defineAsyncComponent</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F92672;"> import</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;./TapCaptcha.vue&#39;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">	const</span><span style="color:#F8F8F2;"> refTapCaptcha </span><span style="color:#F92672;">=</span></span>
<span class="line"><span style="color:#A6E22E;">			useTemplateRef</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">InstanceType</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">typeof</span><span style="color:#F8F8F2;"> TapCaptcha&gt;&gt;(</span><span style="color:#E6DB74;">&#39;ref_tap_captcha&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	refTapCaptcha.value?.</span><span style="color:#A6E22E;">show</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><div class="language-vue line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">	&lt;</span><span style="color:#F92672;">el-form</span></span>
<span class="line"><span style="color:#A6E22E;">		ref</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;ref_form&quot;</span></span>
<span class="line"><span style="color:#F8F8F2;">	/&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">template</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">script</span><span style="color:#A6E22E;"> setup</span><span style="color:#A6E22E;"> lang</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;ts&quot;</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F92672;">	import</span><span style="color:#F92672;"> type</span><span style="color:#F8F8F2;"> { FormInstance } </span><span style="color:#F92672;">from</span><span style="color:#E6DB74;"> &#39;element-plus/es&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">	const</span><span style="color:#F8F8F2;"> refForm </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> useTemplateRef</span><span style="color:#F8F8F2;">&lt;</span><span style="color:#A6E22E;text-decoration:underline;">FormInstance</span><span style="color:#F8F8F2;">&gt;(</span><span style="color:#E6DB74;">&#39;ref_form&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">	const</span><span style="color:#A6E22E;"> submit</span><span style="color:#F92672;"> =</span><span style="color:#F92672;"> async</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">		try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">			await</span><span style="color:#F8F8F2;"> refForm.value?.</span><span style="color:#A6E22E;">validate</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">			//</span></span>
<span class="line"><span style="color:#F8F8F2;">		} </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#88846F;">			//</span></span>
<span class="line"><span style="color:#F8F8F2;">		}</span></span>
<span class="line"><span style="color:#F8F8F2;">	};</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,13),p=[o];function c(t,r,i,F,d,u){return l(),a("div",null,p)}const m=s(e,[["render",c]]);export{b as __pageData,m as default};
