import{_ as n,c as a,a0 as e,o as l}from"./chunks/framework.Bakaa70P.js";const y=JSON.parse('{"title":"vue3 【路由】","description":"","frontmatter":{},"headers":[],"relativePath":"vue/vue3/router.md","filePath":"vue/vue3/router.md","lastUpdated":1718695853000}'),p={name:"vue/vue3/router.md"};function o(t,s,r,c,i,F){return l(),a("div",null,s[0]||(s[0]=[e(`<h1 id="vue3-【路由】" tabindex="-1">vue3 【路由】 <a class="header-anchor" href="#vue3-【路由】" aria-label="Permalink to &quot;vue3 【路由】&quot;">​</a></h1><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> router </span><span style="color:#F92672;">from</span><span style="color:#E6DB74;"> &#39;@/router&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">import</span><span style="color:#F8F8F2;"> {onBeforeRouteUpdate} </span><span style="color:#F92672;">from</span><span style="color:#E6DB74;"> &#39;vue-router&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 解析守卫 (也可以放在组件内)</span></span>
<span class="line"><span style="color:#F8F8F2;">router.</span><span style="color:#A6E22E;">beforeResolve</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">to</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#88846F;">    // 导航被确认之前调用, 页面可能在下一帧跳转成功</span></span>
<span class="line"><span style="color:#88846F;">    // 此时将\`to.name\`给\`&lt;component&gt;\`的\`key\`</span></span>
<span class="line"><span style="color:#88846F;">    // 如果下一帧, 页面还没跳转成功 (此时组件文件还没加载成功, 却提前改变了key), 那么就会报错\`parentComponent.ctx.deactivate is not a function\`</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 组件内的守卫</span></span>
<span class="line"><span style="color:#A6E22E;">onBeforeRouteUpdate</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">to</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#88846F;">	// 当前路由改变，再次访问该组件时触发</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div>`,2)]))}const b=n(p,[["render",o]]);export{y as __pageData,b as default};
