import{_ as s,c as n,o as a,a1 as l}from"./chunks/framework.B3EJgH_4.js";const f=JSON.parse('{"title":"base64 和 arrayBuffer 【JS】","description":"","frontmatter":{},"headers":[],"relativePath":"webs/effects/base64-arraybuffer.md","filePath":"webs/effects/base64-arraybuffer.md","lastUpdated":1715407916000}'),p={name:"webs/effects/base64-arraybuffer.md"},e=l(`<h1 id="base64-和-arraybuffer-【js】" tabindex="-1">base64 和 arrayBuffer 【JS】 <a class="header-anchor" href="#base64-和-arraybuffer-【js】" aria-label="Permalink to &quot;base64 和 arrayBuffer 【JS】&quot;">​</a></h1><h2 id="base64-arraybuffer" tabindex="-1">base64 -&gt; arrayBuffer <a class="header-anchor" href="#base64-arraybuffer" aria-label="Permalink to &quot;base64 -&gt; arrayBuffer&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> decode</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">base64</span><span style="color:#F92672;">:</span><span style="color:#66D9EF;font-style:italic;"> string</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">:</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">ArrayBuffer</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    let</span><span style="color:#F8F8F2;"> bufferLength </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> base64.length </span><span style="color:#F92672;">*</span><span style="color:#AE81FF;"> 0.75</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        len </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> base64.length,</span></span>
<span class="line"><span style="color:#F8F8F2;">        i,</span></span>
<span class="line"><span style="color:#F8F8F2;">        p </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">        encoded1,</span></span>
<span class="line"><span style="color:#F8F8F2;">        encoded2,</span></span>
<span class="line"><span style="color:#F8F8F2;">        encoded3,</span></span>
<span class="line"><span style="color:#F8F8F2;">        encoded4;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> (base64[base64.length </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">===</span><span style="color:#E6DB74;"> &#39;=&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        bufferLength</span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">        if</span><span style="color:#F8F8F2;"> (base64[base64.length </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">===</span><span style="color:#E6DB74;"> &#39;=&#39;</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">            bufferLength</span><span style="color:#F92672;">--</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">        }</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    const</span><span style="color:#F8F8F2;"> arraybuffer </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> ArrayBuffer</span><span style="color:#F8F8F2;">(bufferLength),</span></span>
<span class="line"><span style="color:#F8F8F2;">        bytes </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Uint8Array</span><span style="color:#F8F8F2;">(arraybuffer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> len; i </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 4</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        encoded1 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lookup[base64.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(i)];</span></span>
<span class="line"><span style="color:#F8F8F2;">        encoded2 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lookup[base64.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">)];</span></span>
<span class="line"><span style="color:#F8F8F2;">        encoded3 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lookup[base64.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">)];</span></span>
<span class="line"><span style="color:#F8F8F2;">        encoded4 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> lookup[base64.</span><span style="color:#A6E22E;">charCodeAt</span><span style="color:#F8F8F2;">(i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 3</span><span style="color:#F8F8F2;">)];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">        bytes[p</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> (encoded1 </span><span style="color:#F92672;">&lt;&lt;</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> (encoded2 </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#AE81FF;"> 4</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        bytes[p</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ((encoded2 </span><span style="color:#F92672;">&amp;</span><span style="color:#AE81FF;"> 15</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">&lt;&lt;</span><span style="color:#AE81FF;"> 4</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> (encoded3 </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">        bytes[p</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> ((encoded3 </span><span style="color:#F92672;">&amp;</span><span style="color:#AE81FF;"> 3</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">&lt;&lt;</span><span style="color:#AE81FF;"> 6</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> (encoded4 </span><span style="color:#F92672;">&amp;</span><span style="color:#AE81FF;"> 63</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> arraybuffer;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div><h2 id="arraybuffer-base64" tabindex="-1">arrayBuffer -&gt; base64 <a class="header-anchor" href="#arraybuffer-base64" aria-label="Permalink to &quot;arrayBuffer -&gt; base64&quot;">​</a></h2><div class="language-ts line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> encode</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">arraybuffer</span><span style="color:#F92672;">:</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">ArrayBuffer</span><span style="color:#F8F8F2;">)</span><span style="color:#F92672;">:</span><span style="color:#66D9EF;font-style:italic;"> string</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">    let</span><span style="color:#F8F8F2;"> bytes </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Uint8Array</span><span style="color:#F8F8F2;">(arraybuffer),</span></span>
<span class="line"><span style="color:#F8F8F2;">        i,</span></span>
<span class="line"><span style="color:#F8F8F2;">        len </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> bytes.length,</span></span>
<span class="line"><span style="color:#F8F8F2;">        base64 </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    for</span><span style="color:#F8F8F2;"> (i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#F8F8F2;"> len; i </span><span style="color:#F92672;">+=</span><span style="color:#AE81FF;"> 3</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        base64 </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> chars[bytes[i] </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">        base64 </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> chars[((bytes[i] </span><span style="color:#F92672;">&amp;</span><span style="color:#AE81FF;"> 3</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">&lt;&lt;</span><span style="color:#AE81FF;"> 4</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> (bytes[i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#AE81FF;"> 4</span><span style="color:#F8F8F2;">)];</span></span>
<span class="line"><span style="color:#F8F8F2;">        base64 </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> chars[((bytes[i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">&amp;</span><span style="color:#AE81FF;"> 15</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">&lt;&lt;</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">|</span><span style="color:#F8F8F2;"> (bytes[i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">&gt;&gt;</span><span style="color:#AE81FF;"> 6</span><span style="color:#F8F8F2;">)];</span></span>
<span class="line"><span style="color:#F8F8F2;">        base64 </span><span style="color:#F92672;">+=</span><span style="color:#F8F8F2;"> chars[bytes[i </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">&amp;</span><span style="color:#AE81FF;"> 63</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    if</span><span style="color:#F8F8F2;"> (len </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 3</span><span style="color:#F92672;"> ===</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        base64 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> base64.</span><span style="color:#A6E22E;">substring</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, base64.length </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;=&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    } </span><span style="color:#F92672;">else</span><span style="color:#F92672;"> if</span><span style="color:#F8F8F2;"> (len </span><span style="color:#F92672;">%</span><span style="color:#AE81FF;"> 3</span><span style="color:#F92672;"> ===</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#F8F8F2;">        base64 </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> base64.</span><span style="color:#A6E22E;">substring</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, base64.length </span><span style="color:#F92672;">-</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">) </span><span style="color:#F92672;">+</span><span style="color:#E6DB74;"> &#39;==&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">    return</span><span style="color:#F8F8F2;"> base64;</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><h2 id="文献-🎨" tabindex="-1">文献 🎨 <a class="header-anchor" href="#文献-🎨" aria-label="Permalink to &quot;文献 🎨&quot;">​</a></h2><ul><li><a href="https://github.com/niklasvh/base64-arraybuffer" target="_blank" rel="noreferrer">base64-arraybuffer</a></li></ul>`,7),o=[e];function F(r,c,t,y,i,b){return a(),n("div",null,o)}const d=s(p,[["render",F]]);export{f as __pageData,d as default};
