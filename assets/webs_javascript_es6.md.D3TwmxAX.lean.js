import{_ as n,c as a,a0 as l,o as p}from"./chunks/framework.Bakaa70P.js";const b=JSON.parse('{"title":"JS ES6 【块级作用域, 扩展运算符, 箭头函数】","description":"","frontmatter":{},"headers":[],"relativePath":"webs/javascript/es6.md","filePath":"webs/javascript/es6.md","lastUpdated":1716256931000}'),e={name:"webs/javascript/es6.md"};function o(c,s,r,t,F,i){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="js-es6-【块级作用域-扩展运算符-箭头函数】" tabindex="-1">JS ES6 【块级作用域, 扩展运算符, 箭头函数】 <a class="header-anchor" href="#js-es6-【块级作用域-扩展运算符-箭头函数】" aria-label="Permalink to &quot;JS ES6 【块级作用域, 扩展运算符, 箭头函数】&quot;">​</a></h1><h2 id="关于" tabindex="-1">关于 <a class="header-anchor" href="#关于" aria-label="Permalink to &quot;关于&quot;">​</a></h2><ul><li><p>ECMAScript, 浏览器脚本语言的标准</p></li><li><p>JavaScript, 浏览器脚本语言</p></li><li><p>ES6, 即 ECMAScript 6; 2015/06 发版, 又称 ES2015</p><ul><li>是JavaScript语言的下一代标准</li><li>包括 ES2015 之后 ES 标准的制定 (ES2016...ES2020..., 或 ES7...ES11...)</li><li><a href="https://img-blog.csdnimg.cn/b40cfe261a1b490599ded14f8f1a84dc.jpeg" target="_blank" rel="noreferrer">涉及技术点概述图</a></li></ul></li><li><p>兼容性</p><ul><li>PC端支持现代浏览器, IE系列对ES6的兼容都不友好, 需要转ES6</li><li>移动端基本都支持, <code>proxy</code>需要比较新的设备支持</li></ul></li></ul><h2 id="块级作用域" tabindex="-1">块级作用域 <a class="header-anchor" href="#块级作用域" aria-label="Permalink to &quot;块级作用域&quot;">​</a></h2><blockquote><p>let, const 类似于 var 用于声明变量</p></blockquote><ul><li>不能重复声明</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: SyntaxError: Identifier &#39;a&#39; has already been declared</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>作用于代码块内</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">	if</span><span style="color:#F8F8F2;"> (</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">		var</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">		let</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">	// var 作用于函数内, jg: undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(a);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">	// jg: ReferenceError: b is not defined</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(b);</span></span>
<span class="line"><span style="color:#F8F8F2;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><ul><li>编译期不被初始化</li></ul><blockquote><p>编译期 初始化 var 声明的变量与函数 (function, import, class)</p><p>执行期 对变量赋值与函数调用</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(b);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// ReferenceError: a is not defined</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(a);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>const 与 let 的区别</li></ul><blockquote><p>声明变量时必须赋值</p><p>声明的变量不可继续赋值</p></blockquote><ul><li>示例</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// jg: SyntaxError: Missing initializer in const declaration</span></span>
<span class="line"><span style="color:#88846F;">// const a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: TypeError: Assignment to constant variable</span></span>
<span class="line"><span style="color:#F8F8F2;">b </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li>开发经验 <ul><li>在很多接触的项目中, 会碰到 <code>let</code> 的滥用, 如 <ul><li><code>let {data} = await apixxx</code><ul><li>没有后续赋值, 使用<code>const</code>更适合</li><li>虽然性能上没影响, 但是影响正确的代码解读</li></ul></li><li><code>for (let i)</code><ul><li>正确的用途: 规避异步线程共用同一个变量作用域</li><li>滥用: 会创建多个<code>let</code>作用域, 影响性能, 消耗更多的执行时间</li></ul></li></ul></li></ul></li></ul><h2 id="扩展运算符" tabindex="-1">扩展运算符 <a class="header-anchor" href="#扩展运算符" aria-label="Permalink to &quot;扩展运算符&quot;">​</a></h2><blockquote><p>将数组或对象, 序列化成多个参数, 格式: <code>...</code>数组或对象</p><p>序列化后的结果不能直接输出, 必须作为 数组参数, 对象参数, 调用方法和函数参数, 解构赋值参数</p></blockquote><ul><li>数组中的应用</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 数组合并, jg: [0, 1, 2, 3]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">a, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#88846F;">// 相当于</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">].</span><span style="color:#A6E22E;">concat</span><span style="color:#F8F8F2;">(a, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 获取数组中的最大值, jg: 3</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#A6E22E;">max</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">b);</span></span>
<span class="line"><span style="color:#88846F;">// 相当于</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.max.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">, b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 数组作为日期参数</span></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#A6E22E;"> Date</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">2023</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"><span style="color:#88846F;">// 相当于</span></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#A6E22E;"> Date</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2023</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">// 相当于</span></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#F8F8F2;"> (Date.bind.</span><span style="color:#A6E22E;">apply</span><span style="color:#F8F8F2;">(Date, [</span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2023</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">]));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 字符串转数组, jg: [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> c </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#F92672;">...</span><span style="color:#E6DB74;">&#39;abc&#39;</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#88846F;">// 相当于</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;abc&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">split</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#88846F;">// 相当于</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> [</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">d] </span><span style="color:#F92672;">=</span><span style="color:#E6DB74;"> &#39;abc&#39;</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div><ul><li>对象中的应用</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {x: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, y: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: {z: 0, x: 1, y: 2, n: 3}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {z: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">a, n: </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>可用于 拷贝数组或对象, 解决<a href="./#引用数据类型">引用数据类型</a>的问题</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: // [1, 2]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">a];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {x: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, b: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: {x: 1, b: 2}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">a};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li>作为 调用方法和函数参数 <ul><li>在函数中, 作为<code>剩余参数</code>, 即序列化剩下的所有参数, 故使用<code>扩展运算符</code>的变量要作为最后一个参数成员</li></ul></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> a</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">...</span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#88846F;">	// jg: 0</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(x);</span></span>
<span class="line"><span style="color:#88846F;">	// jg: [1, 2, 3]</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(y);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">a</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">], </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><code>剩余参数</code>取代<code>function</code>中的<code>arguments</code> (箭头函数没有 arguments)</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#A6E22E;"> a</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#88846F;">	// jg: [1, 2, 3]</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">arguments</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">a</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>作为 <a href="#解构赋值">解构赋值</a>参数</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> [a, </span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">b] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: 1</span></span>
<span class="line"><span style="color:#F8F8F2;">a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: [2, 3]</span></span>
<span class="line"><span style="color:#F8F8F2;">b;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>使用<code>扩展运算符</code>的变量只能作为最后一个参数成员</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// jg: SyntaxError: Rest element must be last element</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> [</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">a, b] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="解构赋值" tabindex="-1">解构赋值 <a class="header-anchor" href="#解构赋值" aria-label="Permalink to &quot;解构赋值&quot;">​</a></h2><blockquote><p>用于快速提取数组或对象中的成员</p></blockquote><ul><li>数组中的应用</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> [a, b] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#88846F;">// jg: 1</span></span>
<span class="line"><span style="color:#F8F8F2;">a;</span></span>
<span class="line"><span style="color:#88846F;">// jg: 2</span></span>
<span class="line"><span style="color:#F8F8F2;">b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 交换变量</span></span>
<span class="line"><span style="color:#F8F8F2;">[a, b] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [b, a];</span></span>
<span class="line"><span style="color:#88846F;">// jg: 2</span></span>
<span class="line"><span style="color:#F8F8F2;">a;</span></span>
<span class="line"><span style="color:#88846F;">// jg: 1</span></span>
<span class="line"><span style="color:#F8F8F2;">b;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 提取数组值, c 匹配不到, 取默认值 3</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> [a, b, c </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 3</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><ul><li>对象中的应用</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 提取JSON值</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">	id,</span></span>
<span class="line"><span style="color:#F8F8F2;">	list,</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">	id: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">	name: </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">	list: [],</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: 1</span></span>
<span class="line"><span style="color:#F8F8F2;">id</span></span>
<span class="line"><span style="color:#88846F;">// jg: []</span></span>
<span class="line"><span style="color:#F8F8F2;">list</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="class-类" tabindex="-1">class, 类 <a class="header-anchor" href="#class-类" aria-label="Permalink to &quot;class, 类&quot;">​</a></h2><ul><li><p>声明</p><ul><li>通过<code>class</code>声明类</li><li>推荐<code>class MyName {}</code>, 而不是<code>const MyName = class {}</code></li><li>遵循大驼峰命名</li></ul></li><li><p><code>constructor</code>, 构造方法</p><ul><li>用于创建和初始化在类中创建的对象 <ul><li>没有初始化内容, 可去掉该构造方法 (会默认存在)</li></ul></li></ul></li><li><p><code>extends</code>, 继承</p><ul><li>继承的类, 叫作<code>派生类</code>; 对派生类而言, 其被继承的类, 叫作<code>基类</code></li><li>派生类 <ul><li>内部如果使用<code>constructor</code>, 需要在其构造方法内部的最前面调用<code>super()</code></li><li>内部声明的方法会优先覆盖基类的方法 <ul><li>使用<code>super.基类方法()</code>继承基类的方法</li></ul></li></ul></li></ul></li><li><p>变量</p><ul><li>声明方式 <ul><li><code>static</code></li><li><code>#</code></li><li><code>get</code></li><li>不用关键字</li></ul></li><li>自身类中, 通过<code>this</code>访问</li><li>派生类中, 通过<code>this</code>或<code>super</code>修改变量 <ul><li>读取只能使用<code>this</code> (<code>super</code>读取为<code>undefined</code>)</li></ul></li></ul></li><li><p>方法</p><ul><li>声明方式 <ul><li><code>static</code></li><li>不用关键字</li></ul></li><li>自身类中, 通过<code>this</code>访问</li><li>派生类中, 通过<code>this</code>或<code>super</code>调用方法</li></ul></li><li><p><code>static</code>, 声明<code>静态方法</code>或<code>静态变量</code></p><ul><li><code>静态变量</code><ul><li>不用初始化值, 但要在被访问前赋值 (如在<code>constructor</code>中赋值), 否则访问为<code>undefined</code></li></ul></li><li><code>静态方法</code><ul><li>无法通过类的实例调用</li><li>无法被继承</li></ul></li></ul></li><li><p><code>#</code>, 声明<code>私有变量</code></p><ul><li>无法被继承</li></ul></li><li><p><code>get</code>, 声明<code>侦听变量</code></p><ul><li>作为<code>侦听变量</code>被修改 (但无法真正被修改, 只能确认初始值) <ul><li>被修改的同时, 会执行对应<code>set</code>声明的方法</li><li>常用于修改<code>私有变量</code></li></ul></li></ul></li><li><p>不用关键字, 即声明<code>公有变量</code>或<code>公有方法</code></p><ul><li>这样声明的<code>公有变量</code>并不规范, 应该使用<code>静态变量</code></li></ul></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Animal</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">	#a </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> -</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F92672;">	static</span><span style="color:#F8F8F2;"> b;</span></span>
<span class="line"><span style="color:#F8F8F2;">	c </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">	constructor</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FD971F;">		this</span><span style="color:#F8F8F2;">.b </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">	eat</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">		console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.#a, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.b, </span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.c);</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">	get</span><span style="color:#A6E22E;"> setA</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#88846F;">		// 初始化返回值</span></span>
<span class="line"><span style="color:#F92672;">		return</span><span style="color:#E6DB74;"> &#39;&#39;</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">	set</span><span style="color:#A6E22E;"> setA</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">val</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#FD971F;">		this</span><span style="color:#F8F8F2;">.#a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> val;</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">class</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">Cat</span><span style="color:#F92672;"> extends</span><span> </span><span style="color:#A6E22E;font-style:italic;text-decoration:underline;">Animal</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#A6E22E;">	eat</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#FD971F;">		super</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">eat</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> myCat </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Cat</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#F8F8F2;">myCat.setA </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">myCat.</span><span style="color:#A6E22E;">eat</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div><h2 id="map" tabindex="-1">Map <a class="header-anchor" href="#map" aria-label="Permalink to &quot;Map&quot;">​</a></h2><ul><li><p>Map, 转成指定键名和键值的类对象集合</p><ul><li>键名不限于字符串; Object, 键名为字符串</li><li>相同键名, 后添加的成员覆盖旧成员</li></ul></li><li><p>取代 Object</p><ul><li>Map 有内建的遍历机制, 一级对象结构采用 Map 更适合</li></ul></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// jg: Map(2) {&#39;a&#39; =&gt; 1, &#39;b&#39; =&gt; 2}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">	[</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">	[</span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 成员数, jg: 2</span></span>
<span class="line"><span style="color:#F8F8F2;">a.size;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 添加成员, jg: // Map(3) {&#39;a&#39; =&gt; 1, &#39;b&#39; =&gt; 2, 1 =&gt; &#39;a&#39;}</span></span>
<span class="line"><span style="color:#F8F8F2;">a.</span><span style="color:#A6E22E;">set</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 删除成员, a, Map(2) {&#39;a&#39; =&gt; 1, 1 =&gt; &#39;a&#39;}, jg: true</span></span>
<span class="line"><span style="color:#F8F8F2;">a.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 判断是否有成员, jg: true</span></span>
<span class="line"><span style="color:#F8F8F2;">a.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 获取键值, jg: 1</span></span>
<span class="line"><span style="color:#F8F8F2;">a.</span><span style="color:#A6E22E;">get</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 清空, a: Map(0) {}</span></span>
<span class="line"><span style="color:#F8F8F2;">a.</span><span style="color:#A6E22E;">clear</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br></div></div><ul><li>可以像对象一样遍历 <ul><li>keys, values, entries, forEach</li></ul></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Map</span><span style="color:#F8F8F2;">([</span></span>
<span class="line"><span style="color:#F8F8F2;">	[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;a&#39;</span><span style="color:#F8F8F2;">],</span></span>
<span class="line"><span style="color:#F8F8F2;">	[</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#E6DB74;">&#39;b&#39;</span><span style="color:#F8F8F2;">]</span></span>
<span class="line"><span style="color:#F8F8F2;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 转成数组, jg: [[1, &#39;a&#39;], [2, &#39;b&#39;]]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">b];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: [1, 2]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">b.</span><span style="color:#A6E22E;">keys</span><span style="color:#F8F8F2;">()];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: [&#39;a&#39;, &#39;b&#39;]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">b.</span><span style="color:#A6E22E;">values</span><span style="color:#F8F8F2;">()];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="set" tabindex="-1">Set <a class="header-anchor" href="#set" aria-label="Permalink to &quot;Set&quot;">​</a></h2><ul><li>通过 new Set(); 生成一个 Set 的数据结构; 将数组或字符串转成类对象集合, 成员不重复</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// jg: Set(2) {1, 2}</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Set</span><span style="color:#F8F8F2;">([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 成员数, jg: 2</span></span>
<span class="line"><span style="color:#F8F8F2;">a.size;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 添加成员, jg: Set(3) {1, 2, &#39;1&#39;}</span></span>
<span class="line"><span style="color:#F8F8F2;">a.</span><span style="color:#A6E22E;">add</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;1&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 删除成员, a, Set(2) {2, &#39;1&#39;}, jg: true</span></span>
<span class="line"><span style="color:#F8F8F2;">a.</span><span style="color:#A6E22E;">delete</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 判断是否有成员, jg: true</span></span>
<span class="line"><span style="color:#F8F8F2;">a.</span><span style="color:#A6E22E;">has</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 清空, a, Set(0) {}</span></span>
<span class="line"><span style="color:#F8F8F2;">a.</span><span style="color:#A6E22E;">clear</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><ul><li>可以像对象一样遍历 <ul><li>keys, values, entries, forEach</li></ul></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// jg: 1 2</span></span>
<span class="line"><span style="color:#F92672;">new</span><span style="color:#A6E22E;"> Set</span><span style="color:#F8F8F2;">([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">]).</span><span style="color:#A6E22E;">forEach</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">v</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(v));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>数组去重</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// jg: // [1, 2]</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">...new</span><span style="color:#A6E22E;"> Set</span><span style="color:#F8F8F2;">([</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">])];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>字符串去重</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// jg: &#39;abc&#39;</span></span>
<span class="line"><span style="color:#F8F8F2;">[</span><span style="color:#F92672;">...new</span><span style="color:#A6E22E;"> Set</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;abcc&#39;</span><span style="color:#F8F8F2;">)].</span><span style="color:#A6E22E;">join</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="symbol" tabindex="-1">Symbol <a class="header-anchor" href="#symbol" aria-label="Permalink to &quot;Symbol&quot;">​</a></h2><ul><li>Symbol(&#39;描述数据类型&#39;), 作为对象的属性名, 该属性名是独立存在的</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> cat </span><span style="color:#F92672;">=</span><span style="color:#A6E22E;"> Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;is annimal&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">	[cat]: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">	c: </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">	[</span><span style="color:#A6E22E;">Symbol</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;is annimal&#39;</span><span style="color:#F8F8F2;">)]: </span><span style="color:#AE81FF;">3</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: 1</span></span>
<span class="line"><span style="color:#F8F8F2;">b[cat];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 此 cat 非 \`const cat\`, jg: undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">b.cat;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 属性名的描述, jg: is annimal</span></span>
<span class="line"><span style="color:#F8F8F2;">cat.description;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 不含 Symbol, jg: [&#39;c&#39;]</span></span>
<span class="line"><span style="color:#F8F8F2;">Object.</span><span style="color:#A6E22E;">getOwnPropertyNames</span><span style="color:#F8F8F2;">(b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 包含 Symbol, 且 Symbol 排序置后, jg: [&#39;c&#39;, Symbol(is annimal), Symbol(is annimal)]</span></span>
<span class="line"><span style="color:#F8F8F2;">Reflect.</span><span style="color:#A6E22E;">ownKeys</span><span style="color:#F8F8F2;">(b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 只有 Symbol, jg: [Symbol(is annimal), Symbol(is annimal)]</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> d </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Object.</span><span style="color:#A6E22E;">getOwnPropertySymbols</span><span style="color:#F8F8F2;">(b);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 属性名是独立存在的, jg: false</span></span>
<span class="line"><span style="color:#F8F8F2;">d[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">==</span><span style="color:#F8F8F2;"> d[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 属性名不是对象私有的, jg: true</span></span>
<span class="line"><span style="color:#F8F8F2;">d[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">===</span><span style="color:#F8F8F2;"> cat;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><ul><li>Symbol.for(&#39;注册全局变量的字符串&#39;), 将属性名注册全局</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 在 a.js 中定义</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Symbol.</span><span style="color:#A6E22E;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;sameParam&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">/**</span></span>
<span class="line"><span style="color:#88846F;"> * 在 b.js 中定义</span></span>
<span class="line"><span style="color:#88846F;"> * </span><span style="color:#66D9EF;font-style:italic;">@type</span><span> </span><span style="color:#A6E22E;text-decoration:underline;">{symbol}</span></span>
<span class="line"><span style="color:#88846F;"> * 如果引用了 a.js 则 b === a // true</span></span>
<span class="line"><span style="color:#88846F;"> * 如果没引用 a.js 则 b = 新定义的属性名</span></span>
<span class="line"><span style="color:#88846F;"> */</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> Symbol.</span><span style="color:#A6E22E;">for</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;sameParam&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: sameParam</span></span>
<span class="line"><span style="color:#F8F8F2;">Symbol.</span><span style="color:#A6E22E;">keyFor</span><span style="color:#F8F8F2;">(a);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="对象扩展" tabindex="-1">对象扩展 <a class="header-anchor" href="#对象扩展" aria-label="Permalink to &quot;对象扩展&quot;">​</a></h2><ul><li>属性表达式</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#88846F;">	// 同名属性的简洁表达式</span></span>
<span class="line"><span style="color:#F8F8F2;">	a,</span></span>
<span class="line"><span style="color:#88846F;">		// 属性方法的简洁表达式</span></span>
<span class="line"><span style="color:#A6E22E;">		b</span><span style="color:#F8F8F2;">()</span></span>
<span class="line"><span style="color:#F8F8F2;">	{</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#88846F;">	// 属性名表达式</span></span>
<span class="line"><span style="color:#F8F8F2;">	[a]</span></span>
<span class="line"><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">	{</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 等同于</span></span>
<span class="line"><span style="color:#F8F8F2;">{</span></span>
<span class="line"><span style="color:#F8F8F2;">	a: a,</span></span>
<span class="line"><span style="color:#F8F8F2;">		b</span></span>
<span class="line"><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">	() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">	},</span></span>
<span class="line"><span style="color:#AE81FF;">		1</span></span>
<span class="line"><span style="color:#F8F8F2;">:</span></span>
<span class="line"><span style="color:#F8F8F2;">	{</span></span>
<span class="line"><span style="color:#F8F8F2;">	}</span></span>
<span class="line"><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br></div></div><h2 id="函数扩展" tabindex="-1">函数扩展 <a class="header-anchor" href="#函数扩展" aria-label="Permalink to &quot;函数扩展&quot;">​</a></h2><ul><li>参数默认值</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 默认第一个参数 n = 0; 默认第二个参数为 {}; 默认 x = 1; 默认 y = 2</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> a</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> (</span><span style="color:#FD971F;font-style:italic;">n</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">, {</span><span style="color:#FD971F;font-style:italic;">x</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">y</span><span style="color:#F92672;"> =</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {}) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#88846F;">	// jg: 0 1 2</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(n, x, y);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">a</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h3 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h3><ul><li>格式</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> a</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ul><li>简写 <ul><li>只有一条语句, 可省略花括号和<code>return</code>, 语句结果即返回值</li><li>只有一个参数, 可省略括号</li></ul></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> a</span><span style="color:#F92672;"> =</span><span style="color:#FD971F;font-style:italic;"> res</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">+</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li><a href="./this#箭头函数">this</a></li></ul><h2 id="运算符扩展" tabindex="-1">运算符扩展 <a class="header-anchor" href="#运算符扩展" aria-label="Permalink to &quot;运算符扩展&quot;">​</a></h2><ul><li><code>**</code> 指数运算符</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// jg: 8</span></span>
<span class="line"><span style="color:#AE81FF;">2</span><span style="color:#F92672;"> **</span><span style="color:#AE81FF;"> 3</span></span>
<span class="line"><span style="color:#88846F;">// 相当于</span></span>
<span class="line"><span style="color:#F8F8F2;">Math.</span><span style="color:#A6E22E;">pow</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><ul><li><code>?.</code> 链判断运算符 <ul><li>从左到右, 不分运算符优先级, 判断是否存在, 存在则返回其值, 不存在则中止, 都不存在则返回 <code>undefined</code></li></ul></li></ul><p>确保数组存在</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#88846F;">// 报错: Cannot read properties of null (reading &#39;0&#39;)</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;abc&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">match</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;d&#39;</span><span style="color:#F8F8F2;">)[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 避免报错, jg: undefined</span></span>
<span class="line"><span style="color:#E6DB74;">&#39;abc&#39;</span><span style="color:#F8F8F2;">.</span><span style="color:#A6E22E;">match</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;d&#39;</span><span style="color:#F8F8F2;">)?.[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">];</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>确保对象存在</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> data </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#88846F;">	// 正常数据返回是 user: {name: &#39;xx&#39;}</span></span>
<span class="line"><span style="color:#F8F8F2;">	user: </span><span style="color:#AE81FF;">null</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 报错: Cannot read properties of null (reading &#39;name&#39;)</span></span>
<span class="line"><span style="color:#F8F8F2;">data.user.name;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 避免报错, jg: undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">data.user?.name;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>确保函数存在</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#88846F;">	// 有些方法可能在适当的时机实现 obj.fn = () =&gt; {}</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 报错: obj.fn is not a function</span></span>
<span class="line"><span style="color:#F8F8F2;">obj.</span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 避免报错, jg: undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">obj.</span><span style="color:#A6E22E;">fn</span><span style="color:#F8F8F2;">?.();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li><code>??</code> 空位合并运算符 <ul><li>类似于 <code>||</code>, 不过只有左侧为<code>null</code>或<code>undefined</code>时, 才会返回右侧的值</li></ul></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> null</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: 0</span></span>
<span class="line"><span style="color:#F8F8F2;">c </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">??</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">??</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><ul><li>赋值运算符 + + <ul><li><code>??=</code>, 即<code>??</code>成立执行赋值</li></ul></li></ul><p><code>||=</code>, 即<code>||</code>成立执行赋值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">||=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">// 相当于</span></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">||</span><span style="color:#F8F8F2;"> (a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><code>&amp;&amp;=</code>, 即<code>&amp;&amp;</code>成立执行赋值</p><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">let</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 1</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">&amp;&amp;=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#88846F;">// 相当于</span></span>
<span class="line"><span style="color:#F8F8F2;">a </span><span style="color:#F92672;">&amp;&amp;</span><span style="color:#F8F8F2;"> (a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="promise" tabindex="-1">Promise <a class="header-anchor" href="#promise" aria-label="Permalink to &quot;Promise&quot;">​</a></h2><ul><li><code>new Promise</code> 本身是一个匿名函数</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F92672;">new</span><span style="color:#66D9EF;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 1</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 2</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><ul><li>使用时, 尽量用<code>await</code>的形式, 避免用<code>then</code>的形式</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> test</span><span style="color:#F92672;"> =</span><span style="color:#F92672;"> async</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F92672;">	return</span><span style="color:#F92672;"> new</span><span style="color:#66D9EF;font-style:italic;"> Promise</span><span style="color:#F8F8F2;">((</span><span style="color:#FD971F;font-style:italic;">resolve</span><span style="color:#F8F8F2;">, </span><span style="color:#FD971F;font-style:italic;">reject</span><span style="color:#F8F8F2;">) </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#A6E22E;">		setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#88846F;">			// \`resolve\`, \`reject\` 同时存在时, 只会返回顺序第一的那个; 但不影响语句继续往下执行</span></span>
<span class="line"><span style="color:#A6E22E;">			reject</span><span style="color:#F8F8F2;">(</span><span style="color:#F92672;">new</span><span style="color:#A6E22E;"> Error</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;异常信息&#39;</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#F8F8F2;">			console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#A6E22E;">			resolve</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;正确内容&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">			console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">		});</span></span>
<span class="line"><span style="color:#F8F8F2;">	});</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">test</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"><span style="color:#88846F;">// 没有\`catch\`无法捕获到\`reject\`, 异常会在\`new Promise\`内部执行\`reject\`后抛出</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">test</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">then</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">res</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res);</span></span>
<span class="line"><span style="color:#F8F8F2;">}).</span><span style="color:#A6E22E;">catch</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;font-style:italic;">err</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#88846F;">	// 通过\`catch\`, 在\`new Promise\`内部, 遇到\`reject\`会立即抛出</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">error</span><span style="color:#F8F8F2;">(err, </span><span style="color:#AE81FF;">3</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F92672;">try</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">	const</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#A6E22E;"> test</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res);</span></span>
<span class="line"><span style="color:#F8F8F2;">} </span><span style="color:#F92672;">catch</span><span style="color:#F8F8F2;"> (err) {</span></span>
<span class="line"><span style="color:#88846F;">	// 通过\`catch\`, 在\`new Promise\`内部, 遇到\`reject\`会立即抛出</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">error</span><span style="color:#F8F8F2;">(err, </span><span style="color:#AE81FF;">4</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> res </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> await</span><span style="color:#A6E22E;"> test</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#88846F;">// 没有\`catch\`无法捕获到\`reject\`, 异常会在\`new Promise\`内部遇到\`reject\`时抛出; 且\`await\`语句无法继续往下执行</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(res);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div><h2 id="开发风格" tabindex="-1">开发风格 <a class="header-anchor" href="#开发风格" aria-label="Permalink to &quot;开发风格&quot;">​</a></h2><ul><li><p>尾随逗号</p><ul><li><blockquote><p>对象字面量和数组字面量支持尾随逗号, 这有助于版本控制和代码合并，因为它可以让Git更好地识别改动</p></blockquote></li></ul></li><li><p>输出一个函数用小驼峰</p></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F92672;">export</span><span style="color:#66D9EF;font-style:italic;"> const</span><span style="color:#A6E22E;"> aaBb</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>输出一个对象用大驼峰</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#F92672;">export</span><span style="color:#66D9EF;font-style:italic;"> const</span><span style="color:#F8F8F2;"> AaBb </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>模块化编程 <ul><li><code>ES6</code>模块化 <ul><li>通过<code>import</code>引入模块, 通过<code>export</code>导出模块内变量或函数</li><li>每个模块只加载一次</li><li>同步加载</li></ul></li><li>对比<code>CommonJS</code><ul><li>Node服务器端模块的规范, 一个文件即一个模块</li><li>通过<code>require</code>引入模块, 通过<code>module.exports</code>导出模块内容</li><li>同步加载</li></ul></li><li>对比<code>AMD</code><ul><li><code>requireJs</code>的规范化产物</li><li>异步加载</li></ul></li><li>对比<code>CMD</code><ul><li><code>SeaJS</code>的规范化产物</li><li>异步加载</li></ul></li></ul></li></ul><h2 id="其它-es6-内容" tabindex="-1">其它 ES6 内容 <a class="header-anchor" href="#其它-es6-内容" aria-label="Permalink to &quot;其它 ES6 内容&quot;">​</a></h2><ul><li><p><a href="./string#模板字符串">模板字符串</a></p></li><li><p><a href="./number#BigInt">BigInt</a></p></li><li><p><code>async</code>, 声明异步函数</p><ul><li>等待&quot;await 表达式&quot;执行完成, 才继续执行其后语句</li></ul></li></ul>`,104)]))}const u=n(e,[["render",o]]);export{b as __pageData,u as default};
