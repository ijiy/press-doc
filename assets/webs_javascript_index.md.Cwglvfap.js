import{_ as s,c as n,o as a,a1 as l}from"./chunks/framework.B3EJgH_4.js";const d=JSON.parse('{"title":"JS 基础 【未分类混合】","description":"","frontmatter":{},"headers":[],"relativePath":"webs/javascript/index.md","filePath":"webs/javascript/index.md","lastUpdated":1725247280000}'),p={name:"webs/javascript/index.md"},e=l(`<h1 id="js-基础-【未分类混合】" tabindex="-1">JS 基础 【未分类混合】 <a class="header-anchor" href="#js-基础-【未分类混合】" aria-label="Permalink to &quot;JS 基础 【未分类混合】&quot;">​</a></h1><h2 id="基础数据类型" tabindex="-1">基础数据类型 <a class="header-anchor" href="#基础数据类型" aria-label="Permalink to &quot;基础数据类型&quot;">​</a></h2><ul><li><p>Null, 空类型</p></li><li><p>Undefined, 未赋值类型</p></li><li><p>Boolean, 布尔型</p></li><li><p><a href="./string">String, 字符串类型</a></p></li><li><p><a href="./number">Number, 数值类型</a></p></li><li><p><a href="./object">Object, 对象类型</a></p></li><li><p>Symbol, 独一无二类型</p></li><li><p>BigInt, 任意长度的整型</p></li></ul><h2 id="栈内存和堆内存" tabindex="-1">栈内存和堆内存 <a class="header-anchor" href="#栈内存和堆内存" aria-label="Permalink to &quot;栈内存和堆内存&quot;">​</a></h2><ul><li><p>栈内存</p><ul><li>每个存储空间, 存储的是一个变量和变量值</li><li>变量值, 是一个<a href="#基础数据类型">基础数据类型</a> 或 &quot;引用地址&quot;</li><li>引用地址, 指向堆内存中存储的数据或函数</li><li>若两个变量的&quot;引用地址&quot;相同 (a = b), 则修改一个变量的属性, 另一个变量也会受到影响</li><li>JavaScript 允许直接访问栈内存的存储空间</li></ul></li><li><p>堆内存</p><ul><li>每个存储空间, 存储的是一个对象数据 (Object 即<a href="#引用数据类型">引用数据类型</a>) 或 函数 (Function)</li><li>JavaScript 不允许直接访问堆内存的存储空间</li></ul></li></ul><h2 id="引用数据类型" tabindex="-1">引用数据类型 <a class="header-anchor" href="#引用数据类型" aria-label="Permalink to &quot;引用数据类型&quot;">​</a></h2><ul><li>Object, 包括 Object, Array, Date, RegExp</li></ul><details class="details custom-block"><summary>引用&quot;Object&quot;, 异常示例</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {x: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">b.x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: {x: 2}</span></span>
<span class="line"><span style="color:#F8F8F2;">a;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></details><details class="details custom-block"><summary>引用&quot;Object&quot;, 优化方案</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {x: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#88846F;">// const b = Object.assign({}, a);</span></span>
<span class="line"><span style="color:#88846F;">// const b = JSON.parse(JSON.stringify(a));</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">a};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">b.x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: {x: 1}</span></span>
<span class="line"><span style="color:#F8F8F2;">a;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></details><details class="details custom-block"><summary>引用&quot;Array&quot;, 异常示例</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">b[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: [2]</span></span>
<span class="line"><span style="color:#F8F8F2;">a;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></details><details class="details custom-block"><summary>引用<code>浅层</code>&quot;Array&quot;, 优化方案</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">];</span></span>
<span class="line"><span style="color:#88846F;">// const b = a.concat();</span></span>
<span class="line"><span style="color:#88846F;">// const b = Object.assign([], a);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#F92672;">...</span><span style="color:#F8F8F2;">a];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">b[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">] </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: [1]</span></span>
<span class="line"><span style="color:#F8F8F2;">a;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></details><details class="details custom-block"><summary>引用<code>深层</code>&quot;Array&quot;, 优化方案</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [{</span></span>
<span class="line"><span style="color:#F8F8F2;">	x: </span><span style="color:#AE81FF;">1</span></span>
<span class="line"><span style="color:#F8F8F2;">}];</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> JSON.</span><span style="color:#A6E22E;">parse</span><span style="color:#F8F8F2;">(JSON.</span><span style="color:#A6E22E;">stringify</span><span style="color:#F8F8F2;">(a));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">b[</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">].x </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 2</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: [{x: 1}]</span></span>
<span class="line"><span style="color:#F8F8F2;">a;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></details><details class="details custom-block"><summary>引用&quot;Function&quot;, 异常示例</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#A6E22E;"> a</span><span style="color:#F92672;"> =</span><span style="color:#FD971F;font-style:italic;"> args</span><span style="color:#66D9EF;font-style:italic;"> =&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(args);</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">b.</span><span style="color:#A6E22E;">call</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;&#39;</span><span style="color:#F8F8F2;">, </span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: 2</span></span>
<span class="line"><span style="color:#A6E22E;">a</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></details><details class="details custom-block"><summary>引用&quot;Date&quot;, 异常示例</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#F8F8F2;"> Date;</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> a;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">b.</span><span style="color:#A6E22E;">setDate</span><span style="color:#F8F8F2;">(</span><span style="color:#AE81FF;">2</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: 2</span></span>
<span class="line"><span style="color:#F8F8F2;">a.</span><span style="color:#A6E22E;">getDate</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></details><h2 id="编译机制" tabindex="-1">编译机制 <a class="header-anchor" href="#编译机制" aria-label="Permalink to &quot;编译机制&quot;">​</a></h2><ul><li><p>编译期创建作用域 (函数), 执行期遍历作用域并赋值</p></li><li><p>属性从当前域开始向外寻找作用空间, 如果找到就进行赋值, 否则继续寻找, 直到window下还找不到就创建空间</p></li></ul><details class="details custom-block"><summary>示例</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#88846F;">	// 1. a 在当前函数下找到了它的存储空间(var a)</span></span>
<span class="line"><span style="color:#88846F;">	// 2. a 在当前函数下向上寻找值, 找不到</span></span>
<span class="line"><span style="color:#88846F;">	// 3. 结果 undefined</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(a);</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">	var</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#88846F;">	// 1. a 在当前的函数下找不到它的存储空间, 于是它就到外层函数下寻找, 并找到了(var a)</span></span>
<span class="line"><span style="color:#88846F;">	// 2. a 在外层函数下向上寻找值, 并找到了(a = 0)</span></span>
<span class="line"><span style="color:#88846F;">	// 3. 结果 0</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(a);</span></span>
<span class="line"><span style="color:#F8F8F2;">})();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#88846F;">	// 1. aa 在当前的函数下找不到它的存储空间, 于是它就到外层函数下寻找, 直到 window 下, 还找不到</span></span>
<span class="line"><span style="color:#88846F;">	// 2. 结果 报错</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(aa);</span></span>
<span class="line"><span style="color:#F8F8F2;">})();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></details><h2 id="线程机制" tabindex="-1">线程机制 <a class="header-anchor" href="#线程机制" aria-label="Permalink to &quot;线程机制&quot;">​</a></h2><ul><li><p>浏览器内核是多线程的, 包括JS引擎线程, GUI渲染线程, 事件触发线程</p></li><li><p>JS引擎是单线程执行任务, GUI渲染与JS引擎互斥, 当执行重绘或回流, JS就被挂起</p></li><li><p>事件触发会把计时器, 点击, Ajax等事件的回调函数排到任务队列中, 当JS线程的任务为空, 才会循环读取任务队列</p></li></ul><details class="details custom-block"><summary>示例</summary><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F92672;">for</span><span style="color:#F8F8F2;"> (</span><span style="color:#66D9EF;font-style:italic;">var</span><span style="color:#F8F8F2;"> i </span><span style="color:#F92672;">=</span><span style="color:#AE81FF;"> 0</span><span style="color:#F8F8F2;">; i </span><span style="color:#F92672;">&lt;</span><span style="color:#AE81FF;"> 10</span><span style="color:#F8F8F2;">; i</span><span style="color:#F92672;">++</span><span style="color:#F8F8F2;">) {</span></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">	var</span><span style="color:#F8F8F2;"> j </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> i;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">	requestAnimationFrame</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#88846F;">		// 10次 10, 9</span></span>
<span class="line"><span style="color:#F8F8F2;">		console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(i, j);</span></span>
<span class="line"><span style="color:#F8F8F2;">	});</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></details><h2 id="计时器" tabindex="-1">计时器 <a class="header-anchor" href="#计时器" aria-label="Permalink to &quot;计时器&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">setTimeout</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#A6E22E;">clearTimeout</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">setInterval</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#A6E22E;">clearInterval</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">requestAnimationFrame</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"><span style="color:#A6E22E;">cancelAnimationFrame</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="script" tabindex="-1">script <a class="header-anchor" href="#script" aria-label="Permalink to &quot;script&quot;">​</a></h2><div class="language-html line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki monokai vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">script</span><span style="color:#A6E22E;"> src</span><span style="color:#F8F8F2;">=</span><span style="color:#E6DB74;">&quot;&quot;</span><span style="color:#F44747;">/</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">文档停止解析; 加载并执行脚本; 继续解析</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">async</span></span>
<span class="line"><span style="color:#F8F8F2;">异步加载, 脚本执行完后文档继续解析</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">defer</span></span>
<span class="line"><span style="color:#F8F8F2;">异步加载, 文档解析完后执行脚本</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">script</span><span style="color:#A6E22E;"> type</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;text&quot;</span><span style="color:#A6E22E;"> id</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;tpl_header&quot;</span><span style="color:#F8F8F2;">&gt; 不被渲染, 可作为模板使用 &lt;/</span><span style="color:#F92672;">script</span><span style="color:#F8F8F2;">&gt;</span></span>
<span class="line"><span style="color:#F8F8F2;">效果同</span></span>
<span class="line"><span style="color:#F8F8F2;">&lt;</span><span style="color:#F92672;">template</span><span style="color:#A6E22E;"> id</span><span style="color:#F92672;">=</span><span style="color:#E6DB74;">&quot;tpl_header&quot;</span><span style="color:#F8F8F2;">&gt;模板内容&lt;/</span><span style="color:#F92672;">template</span><span style="color:#F8F8F2;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><h2 id="cdn" tabindex="-1">cdn <a class="header-anchor" href="#cdn" aria-label="Permalink to &quot;cdn&quot;">​</a></h2><blockquote><p>将源站内容分发至全国所有的节点，提高用户访问网站的响应速度</p><p>可忽略协议, 如 <code>&lt;script src=&quot;//cdn.bootcss.com/jquery/3.4.1/jquery.min.js&quot;&gt;&lt;/script&gt;</code></p></blockquote><ul><li><p>BootCDN (加载快, 支持广, 版本库更新快)</p><ul><li><a href="http://www.bootcdn.cn" target="_blank" rel="noreferrer">http://www.bootcdn.cn</a></li></ul></li><li><p>baiduCDN (加载快, 支持少, 版本库更新很慢, 压缩率高)</p><ul><li><a href="http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs" target="_blank" rel="noreferrer">http://developer.baidu.com/wiki/index.php?title=docs/cplat/libs</a></li></ul></li><li><p>cdn360 (加载快, 支持不多, 版本库更新一般)</p><ul><li><a href="http://libs.useso.com/js.php" target="_blank" rel="noreferrer">http://libs.useso.com/js.php</a></li></ul></li><li><p>cdnjs (加载慢, 支持内容广, 版本库更新很快, 压缩率高)</p><ul><li><a href="https://cdnjs.com" target="_blank" rel="noreferrer">https://cdnjs.com</a></li></ul></li><li><p>微信 (加载快, 支持很少, 版本没怎么更新)</p><ul><li><a href="http://qydev.weixin.qq.com/cdn/cdnjs.html" target="_blank" rel="noreferrer">http://qydev.weixin.qq.com/cdn/cdnjs.html</a></li></ul></li></ul><h2 id="闭包" tabindex="-1">闭包 <a class="header-anchor" href="#闭包" aria-label="Permalink to &quot;闭包&quot;">​</a></h2><ul><li><p>定义于一个内存空间里的函数</p><ul><li>这个内存空间可以是一个函数 (如 匿名函数), 可以是一个对象 (如 window)</li></ul></li><li><p>一个内存空间里, 调用的变量, 保留于内存; 不被调用的, 就被销毁</p><ul><li>被调用闭包如果引用其外空间下的变量, 那该变量将同闭包一起保留于内存</li></ul></li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> obj </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">	a: </span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#A6E22E;">	b</span><span style="color:#F8F8F2;">: </span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#F92672;">		return</span><span style="color:#F92672;"> ++</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">.a;</span></span>
<span class="line"><span style="color:#F8F8F2;">	},</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// jg: 1</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(obj.</span><span style="color:#A6E22E;">b</span><span style="color:#F8F8F2;">());</span></span>
<span class="line"><span style="color:#88846F;">// jg: 2</span></span>
<span class="line"><span style="color:#F8F8F2;">console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(obj.</span><span style="color:#A6E22E;">b</span><span style="color:#F8F8F2;">());</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="加密" tabindex="-1">加密 <a class="header-anchor" href="#加密" aria-label="Permalink to &quot;加密&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#A6E22E;">encodeURIComponent</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;加密URL&#39;</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6E22E;">decodeURIComponent</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;解码URL&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>base64加密</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;">// 加密</span></span>
<span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">btoa</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">unescape</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">encodeURIComponent</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;加密内容&#39;</span><span style="color:#F8F8F2;">)));</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 解密</span></span>
<span class="line"><span style="color:#A6E22E;">decodeURIComponent</span><span style="color:#F8F8F2;">(</span><span style="color:#A6E22E;">escape</span><span style="color:#F8F8F2;">(window.</span><span style="color:#A6E22E;">atob</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;5Yqg5a+G5YaF5a65&#39;</span><span style="color:#F8F8F2;">)));</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="冷门" tabindex="-1">冷门 <a class="header-anchor" href="#冷门" aria-label="Permalink to &quot;冷门&quot;">​</a></h2><ul><li>选中文字时, 禁止响应点击事件</li></ul><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#88846F;">// 响应的事件中, 判断是否有文字选中</span></span>
<span class="line"><span style="color:#F92672;">if</span><span style="color:#F8F8F2;"> (</span><span style="color:#A6E22E;">getSelection</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">toString</span><span style="color:#F8F8F2;">()) {</span></span>
<span class="line"><span style="color:#F92672;">	return</span><span style="color:#F8F8F2;">;</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 清除选中内容</span></span>
<span class="line"><span style="color:#A6E22E;">getSelection</span><span style="color:#F8F8F2;">().</span><span style="color:#A6E22E;">removeAllRanges</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><ul><li><p>三目运算</p><ul><li><code>x = y ? 1 : 2;</code></li><li>多级三目运算影响代码的可读性</li><li>包含语句的三目运算, 导致无法准确定位异常点和提交点</li></ul></li><li><p><code>switch</code></p><ul><li><code>case</code> 只是语句并非代码块, <code>switch() {}</code> 才是代码块</li></ul></li><li><p><code>void 0</code> 和 <code>undefined</code></p><ul><li><code>void 0</code>, 即 <code>void(0)</code>, <code>void</code> 表达式返回的永远是 <code>undefined</code></li><li><code>undefined</code>, 可被赋值. 不过在现代浏览器中, <code>window.undefined</code> 返回的也永远是 <code>undefined</code></li><li>在判断中使用 <code>void 0</code> 显得更简约, 常作为构建编译的结果; 实际开发 <code>undefined</code> 更容易让人理解</li></ul></li></ul><h2 id="pdf隐藏下载按钮" tabindex="-1">pdf隐藏下载按钮 <a class="header-anchor" href="#pdf隐藏下载按钮" aria-label="Permalink to &quot;pdf隐藏下载按钮&quot;">​</a></h2><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code"><code><span class="line"><span style="color:#F8F8F2;">window.</span><span style="color:#A6E22E;">open</span><span style="color:#F8F8F2;">(</span><span style="color:#E6DB74;">&#39;youUrl#toolbar=0&amp;navpanes=0&#39;</span><span style="color:#F8F8F2;">)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div>`,40),o=[e];function c(r,t,i,F,b,y){return a(),n("div",null,o)}const m=s(p,[["render",c]]);export{d as __pageData,m as default};
