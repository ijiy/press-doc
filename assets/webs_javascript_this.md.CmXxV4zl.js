import{_ as n,c as a,a0 as l,o as p}from"./chunks/framework.Bakaa70P.js";const y=JSON.parse('{"title":"JS 【this】","description":"","frontmatter":{},"headers":[],"relativePath":"webs/javascript/this.md","filePath":"webs/javascript/this.md","lastUpdated":1715407916000}'),e={name:"webs/javascript/this.md"};function o(t,s,c,r,i,F){return p(),a("div",null,s[0]||(s[0]=[l(`<h1 id="js-【this】" tabindex="-1">JS 【this】 <a class="header-anchor" href="#js-【this】" aria-label="Permalink to &quot;JS 【this】&quot;">​</a></h1><blockquote><p>哪个对象 (此对象为<a href="./#引用数据类型">引用数据类型</a>的对象数据) 调用了该函数, 该函数下的<code>this</code>就指向哪个对象</p><p>对象层层调用, <code>this</code>将指向最近的对象</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#F8F8F2;">	length: </span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">,</span></span>
<span class="line"><span style="color:#A6E22E;">	x</span><span style="color:#F8F8F2;">() {</span></span>
<span class="line"><span style="color:#F8F8F2;">		console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">	},</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 相当于 window.a.x(), 这里最近的对象是\`a\`, 故 this =&gt; a, jg: 1</span></span>
<span class="line"><span style="color:#F8F8F2;">a.</span><span style="color:#A6E22E;">x</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> b </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> a.x;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 相当于 window.b(), 故 this =&gt; window, 而 window 的 length 是 0, jg: 0</span></span>
<span class="line"><span style="color:#88846F;">// 不能想成 window.a.x(), 因为 b = a.x, 即 b =&gt; x</span></span>
<span class="line"><span style="color:#A6E22E;">b</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> c </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> [</span><span style="color:#AE81FF;">0</span><span style="color:#F8F8F2;">, a.x];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">// 数组 c 的引用数据类型也是对象, 故 this =&gt; c, 而该数组的长度为 2, jg: 2</span></span>
<span class="line"><span style="color:#F8F8F2;">c[</span><span style="color:#AE81FF;">1</span><span style="color:#F8F8F2;">]();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div><h2 id="箭头函数" tabindex="-1">箭头函数 <a class="header-anchor" href="#箭头函数" aria-label="Permalink to &quot;箭头函数&quot;">​</a></h2><blockquote><p><code>this</code>将跳过该函数, 指向下一个函数的调用对象</p></blockquote><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> a </span><span style="color:#F92672;">=</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#A6E22E;">	b</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#A6E22E;">		setTimeout</span><span style="color:#F8F8F2;">(</span><span style="color:#66D9EF;font-style:italic;">function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#88846F;">			// 函数 setTimeout, 属于对象 window, 所以 this =&gt; window</span></span>
<span class="line"><span style="color:#F8F8F2;">			console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">		});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#88846F;">		// 跳过 setTimeout, 下一个函数 b, 属于对象 a, 所以 this =&gt; a</span></span>
<span class="line"><span style="color:#A6E22E;">		setTimeout</span><span style="color:#F8F8F2;">(() </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">));</span></span>
<span class="line"><span style="color:#F8F8F2;">	},</span></span>
<span class="line"><span style="color:#F8F8F2;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">a.</span><span style="color:#A6E22E;">b</span><span style="color:#F8F8F2;">();</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br></div></div><div class="language-js line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki monokai vp-code" tabindex="0"><code><span class="line"><span style="color:#66D9EF;font-style:italic;">const</span><span style="color:#F8F8F2;"> img </span><span style="color:#F92672;">=</span><span style="color:#F92672;"> new</span><span style="color:#A6E22E;"> Image</span><span style="color:#F8F8F2;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">img.</span><span style="color:#A6E22E;">onload</span><span style="color:#F92672;"> =</span><span style="color:#66D9EF;font-style:italic;"> function</span><span style="color:#F8F8F2;"> () {</span></span>
<span class="line"><span style="color:#88846F;">	// this =&gt; img</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F8F8F2;">img.</span><span style="color:#A6E22E;">onload</span><span style="color:#F92672;"> =</span><span style="color:#F8F8F2;"> () </span><span style="color:#66D9EF;font-style:italic;">=&gt;</span><span style="color:#F8F8F2;"> {</span></span>
<span class="line"><span style="color:#88846F;">	// this =&gt; window</span></span>
<span class="line"><span style="color:#F8F8F2;">	console.</span><span style="color:#A6E22E;">log</span><span style="color:#F8F8F2;">(</span><span style="color:#FD971F;">this</span><span style="color:#F8F8F2;">);</span></span>
<span class="line"><span style="color:#F8F8F2;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div>`,7)]))}const u=n(e,[["render",o]]);export{y as __pageData,u as default};
